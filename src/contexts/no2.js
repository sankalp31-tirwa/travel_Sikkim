import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { app, database, auth } from "./firebaseConfig";
import {
  collection,
  query,
  where,
  addDoc,
  getDocs,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";
import { useRouter } from "next/router";

export default function Tour() {
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user ? user : null);
    });
    return () => {
      unsubscribe();
    };
  }, []);
  // console.table(currentUser);

  const [ID, setID] = useState(null);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [mobile, setMobile] = useState(null);
  const [message, setMessage] = useState("");

  const [fireData, setFireData] = useState([]);
  const [isUpdate, setIsUpdate] = useState(false);
  const databaseRef = collection(database, "Contact Us");
  // const uid = currentUser.uid;
  let router = useRouter();
  useEffect(() => {
    let token = sessionStorage.getItem("Token");
    // const q = query(
    //   collection(database, "Contact Us")
    //   // where("uid", "==", currentUser.uid)
    // );

    // const firestoreRef = collection(database, "Contact Us");
    // // Create a query against the collection where we can match the formId
    // const queryRef = firestoreRef.where("uid", "==", uid);

    if (token) {
      getData();
    }
    if (!token) {
      router.push("/register");
    }
  }, []);

  const articles = [];

  const mydata = async () => {
    const q = query(
      collection(database, "Contact Us"),
      where("uid", "==", currentUser.uid)
    );

    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      // doc.data() is never undefined for query doc snapshots
      // setFireData(
      //   q.docs.map((doc) => {
      //     return { ...doc.data(), id: doc.id };
      //   })
      // );
      articles.push({
        id: doc.id,
        ...doc.data(),
      });
      setFireData(doc.id, " => ", doc.data());
      // console.table(articles);
    });
  };
  // console.log(doc.id, " => ", doc.data());
  console.table(articles);

  const addData = () => {
    addDoc(databaseRef, {
      uid: currentUser.uid,
      name: name,
      email: email,
      mobile: Number(mobile),
      message: message,
    })
      .then(() => {
        alert("Data Sent");
        getData();
        setName("");
        setEmail("");
        setMobile("");
        setMessage("");
      })
      .catch((err) => {
        console.error(err);
      });
  };

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFireData(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const getID = (id, name, email, mobile, message) => {
    setID(id);
    setName(name);
    setEmail(email);
    setMobile(mobile);
    setMessage(message);
    setIsUpdate(true);
  };

  const updateFields = () => {
    let fieldToEdit = doc(database, "Contact Us", ID);
    updateDoc(fieldToEdit, {
      name: name,
      email: email,
      mobile: Number(mobile),
      message: message,
    })
      .then(() => {
        alert("Data Updated");
        getData();
        setName("");
        setEmail("");
        setMobile("");
        setMessage("");
        setIsUpdate(false);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const deleteDocument = (id) => {
    let fieldToEdit = doc(database, "Contact Us", id);
    deleteDoc(fieldToEdit)
      .then(() => {
        alert("Data Deleted");
        getData();
      })
      .catch((err) => {
        alert("Cannot Delete that field..");
      });
  };

  const logout = () => {
    sessionStorage.removeItem("Token");
    router.push("/register");
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Auth Done</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <button onClick={logout}>Log Out</button>
        </div>
        {/* <h1>Page after logged in (TOUR PAGE)</h1> */}
        <h1>{currentUser && `the user :${currentUser.uid}`}</h1>
        <h1>{articles.email}</h1>
        <input
          placeholder="Your Name"
          className={styles.inputBox}
          type="text"
          value={name}
          onChange={(event) => setName(event.target.value)}
          autoComplete="nope"
        />
        <input
          placeholder="Email"
          className={styles.inputBox}
          type="email"
          value={email}
          onChange={(event) => setEmail(event.target.value)}
          autoComplete="nope"
        />
        <input
          placeholder="Mobile No."
          className={styles.inputBox}
          type="number"
          value={mobile}
          onChange={(event) => setMobile(event.target.value)}
          autoComplete="nope"
        />
        <input
          placeholder="Message"
          className={styles.inputBox}
          type="text"
          value={message}
          onChange={(event) => setMessage(event.target.value)}
          autoComplete="nope"
        />

        {isUpdate ? (
          <button className={styles.button} onClick={updateFields}>
            UPDATE
          </button>
        ) : (
          <button className={styles.button} onClick={addData}>
            ADD
          </button>
        )}

        <button className={styles.button} onClick={mydata}>
          Delete
        </button>
        <div>
          {fireData.map((data) => {
            return (
              <div className={styles.flex}>
                <h3>Name: {data.name}</h3>
                <p>Email: {data.email}</p>
                <button
                  className={styles.button}
                  onClick={() =>
                    getID(
                      data.id,
                      data.name,
                      data.email,
                      data.mobile,
                      data.message
                    )
                  }
                >
                  Update
                </button>
                <button
                  className={styles.button}
                  onClick={() => deleteDocument(data.id)}
                >
                  Delete
                </button>
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
}